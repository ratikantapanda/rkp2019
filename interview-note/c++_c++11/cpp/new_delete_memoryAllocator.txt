https://isocpp.org/wiki/faq/dtors#placement-new
1.Difference between new and operator new and placement new.
---------------------------------------------------------------
-----------------------------------------------------------------
////new operator -> memory allocation + object construction
--------------------------------------------------------------
It both allocates memory and calls a constructor for the object.
string* ptr=new string("Hello");
--------------------------------------------------------------------------
////operator new -> memory allocation only + no object construction.
Like malloc, operator new is only responsibility to allocate memory.
It knows nothing about constructors
---------------------------------------------------------------------------
void * operator new(size_t size);

------------------------------------------------------------------------------------------
////placement new  as a special version of operator new-> place an object at a particular location in memory.
 no memory allocation + construction of a object on a particular memory location.
 ---------------------------------------------------------------------------------------------
 void constructFredObjectUsingPlacementNew()
{
  char memory[sizeof(Fred)];  //Interesting static memory.
  void* place = memory;         
  Fred* f = new(place) Fred(); //static memory attached to a dynamic object.
  // The pointers f and place will be equal
  // ...
}
class Widget {
public:
  Widget(int widgetSize);
...
};
Widget * constructWidgetInBuffer(void *buffer,int widgetSize)
{
  return new (buffer) Widget(widgetSize);
}
Such a function might be useful for applications using shared memory or memory-mapped I/O, 
because objects in such applications must be placed at specific addresses or in memory allocated by special routines.
ADVICE: Don’t use this “placement new” syntax unless you have to. Use it only when you really care that an object
 is placed at a particular location in memory. For example, when your hardware has a memory-mapped I/O timer device,
 and you want to place a Clock object at that memory location.

DANGER: You are taking sole responsibility that the pointer you pass to the “placement new” operator points to 
a region of memory that is big enough and is properly aligned for the object type that you’re creating. Neither
 the compiler nor the run-time system make any attempt to check whether you did this right. If your Fred class 
 needs to be aligned on a 4 byte boundary but you supplied a location that isn’t properly aligned, you can have 
 a serious disaster on your hands (if you don’t know what “alignment” means, please don’t use the placement new syntax).
 You have been warned.
-------------------------------------------------
//new implementation as placement new.
string *ps = new string("Memory Management");//new operator
equivalent steps followed by compiler
step-1 //get raw memory
void *memory = operator new(sizeof(string)); 
step 2:- //Initialize object on the raw memory.
call string::string("Memory Management") on raw memory.
//cast the void* pointer to class pointer of the object.
string *ps = static_cast<string*>(memory);
In step-2, it call a constructor directly on a raw memory.
This only possible by using "placement new" which is an special version of operator new.
string *ps=new(memory)string("Memory Managment");
-----------------------------
How placement new can be used by implementing operator new:-
only one extra parameter to operator new i.e location i.e address of the place.
void * operator new(size_t buffersize, void *location)
{
 
  
  return location;
}











//Custom memory pool
---------------------
class Pool {
public:
    Pool() { /* implementation details irrelevant */ };
    virtual ~Pool() { /* ditto */ };

    virtual void *allocate(size_t);
    virtual void deallocate(void *);

    static Pool::misc_pool() { return misc_pool_p; /* global MiscPool for general use */ }
};

class ClusterPool : public Pool { /* ... */ };
class FastPool : public Pool { /* ... */ };
class MapPool : public Pool { /* ... */ };
class MiscPool : public Pool { /* ... */ };

// elsewhere...

void *pnew_new(size_t size)
{
   return Pool::misc_pool()->allocate(size);
}

void *pnew_new(size_t size, Pool *pool_p)
{
   if (!pool_p) {
      return Pool::misc_pool()->allocate(size);
   }
   else {
      return pool_p->allocate(size);
   }
}

void pnew_delete(void *p)
{
   Pool *hp = Pool::find_pool(p);
   // note: if p == 0, then Pool::find_pool(p) will return 0.
   if (hp) {
      hp->deallocate(p);
   }
}

// elsewhere...

class Obj {
public:
   // misc ctors, dtors, etc.

   // just a sampling of new/del operators
   void *operator new(size_t s)             { return pnew_new(s); }
   void *operator new(size_t s, Pool *hp)   { return pnew_new(s, hp); }
   void operator delete(void *dp)           { pnew_delete(dp); }
   void operator delete(void *dp, Pool*)    { pnew_delete(dp); }

   void *operator new[](size_t s)           { return pnew_new(s); }
   void *operator new[](size_t s, Pool* hp) { return pnew_new(s, hp); }
   void operator delete[](void *dp)         { pnew_delete(dp); }
   void operator delete[](void *dp, Pool*)  { pnew_delete(dp); }
};

// elsewhere...

ClusterPool *cp = new ClusterPool(arg1, arg2, ...);

Obj *new_obj = new (cp) Obj(arg_a, arg_b, ...);