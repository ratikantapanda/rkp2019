chapter-4 # synchronizing concurrent operation.
-----------------------------------------------
http://jakascorner.com/blog/
q.diffrence between lock_guard and unique_lock.
ans:-
 std::unique_lock has additional functionalities.

The programmer is able to lock and unlock the mutex with the help of the guard object of type std::unique_lock.

guard2.unlock();
guard2.lock();
------------------
bool flag;
std::mutex m;
void wait_for_flag()
{
  std::unique_lock<std::mutex> lk(m);
  while(!flag)
  {
    lk.unlock();
    std::this_thread::sleep_for(std::chrono::milliseconds(100));
    lk.lock();
  }
}
--------
std::mutex mut;
std::queue<data_chunk> data_queue;
std::condition_variable data_cond;
void data_preparation_thread()
{
  while(more_data_to_prepare())
  {
    data_chunk const data=prepare_data();
    std::lock_guard<std::mutex> lk(mut);
    data_queue.push(data);
    data_cond.notify_one();
  }
}
void data_processing_thread()
{
  while(true)
  {
    std::unique_lock<std::mutex> lk(mut);
    data_cond.wait(lk,[]{return !data_queue.empty();});
    data_chunk data=data_queue.front();
    data_queue.pop();
    lk.unlock();
    process(data);
    if(is_last_chunk(data))
    break;
  }
}
--------------------------------
thread safe queue with conditional variable
---------------------------------------------
template <class T, class Container = std::deque<T> >
class queue {
public:
  explicit queue(const Container&);
  explicit queue(Container&& = Container());
  template <class Alloc> explicit queue(const Alloc&);
  template <class Alloc> queue(const Container&, const Alloc&);
  template <class Alloc> queue(Container&&, const Alloc&);
  template <class Alloc> queue(queue&&, const Alloc&);
  void swap(queue& q);
  bool empty() const;
  size_type size() const;
  T& front();
  const T& front() const;
  T& back();
  const T& back() const;
  void push(const T& x);
  void push(T&& x);
  void pop();
  template <class... Args> void emplace(Args&&... args);
};
-----
interface of threadsafe queue
----------------
#include <memory>
template<typename T>
class threadsafe_queue
{
public:
  threadsafe_queue();
  threadsafe_queue(const threadsafe_queue&);
  threadsafe_queue& operator=(
  const threadsafe_queue&) = delete;
  void push(T new_value);
  bool try_pop(T& value);
  std::shared_ptr<T> try_pop();
  void wait_and_pop(T& value);
  std::shared_ptr<T> wait_and_pop();
  bool empty() const;
};
----------
#include <queue>
#include <mutex>
#include <condition_variable>
template<typename T>
class threadsafe_queue
{
private:
  std::mutex mut;
  std::queue<T> data_queue;
  std::condition_variable data_cond;
public:
  void push(T new_value)
  {
    std::lock_guard<std::mutex> lk(mut);
    data_queue.push(new_value);
    data_cond.notify_one();
  }
  void wait_and_pop(T& value)
  {
    std::unique_lock<std::mutex> lk(mut);
    data_cond.wait(lk,[this]{return !data_queue.empty();});
    value=data_queue.front();
    data_queue.pop();
  }
};
threadsafe_queue<data_chunk> data_queue;
void data_preparation_thread()
{
  while(more_data_to_prepare())
  {
    data_chunk const data=prepare_data();
    data_queue.push(data);
  }
}
void data_processing_thread()
{
  while(true)
 {
   data_chunk data;
   data_queue.wait_and_pop(data);
   process(data);
   if(is_last_chunk(data))
   break;
 }
}

-----------------------------
Final threadsafe queue class
----------------------------
#include <queue>
#include <memory>
#include <mutex>
#include <condition_variable>
template<typename T>
class threadsafe_queue
{
private:
  mutable std::mutex mut;
  std::queue<T> data_queue;
  std::condition_variable data_cond;
public:
  threadsafe_queue(){}
  threadsafe_queue(threadsafe_queue const& other)
  {
    std::lock_guard<std::mutex> lk(other.mut);
    data_queue=other.data_queue;
  }
  void push(T new_value)
  {
    std::lock_guard<std::mutex> lk(mut);
    data_queue.push(new_value);
    data_cond.notify_one();
  }
  void wait_and_pop(T& value)
 {
   std::unique_lock<std::mutex> lk(mut);
   data_cond.wait(lk,[this]{return !data_queue.empty();});
   value=data_queue.front();
   data_queue.pop();
}
  std::shared_ptr<T> wait_and_pop()
  {
    std::unique_lock<std::mutex> lk(mut);
    data_cond.wait(lk,[this]{return !data_queue.empty();});
    std::shared_ptr<T> res(std::make_shared<T>(data_queue.front()));
    data_queue.pop();
    return res;
  }

  bool try_pop(T& value)
  {
   std::lock_guard<std::mutex> lk(mut);
   if(data_queue.empty())
   return false;
   value=data_queue.front();
   data_queue.pop();
   return true;
  }
 std::shared_ptr<T> try_pop()
 {
   std::lock_guard<std::mutex> lk(mut);
   if(data_queue.empty())
   return std::shared_ptr<T>();
   std::shared_ptr<T> res(std::make_shared<T>(data_queue.front()));
   data_queue.pop();
   return res;
 }
 bool empty() const
 {
  std::lock_guard<std::mutex> lk(mut);
  return data_queue.empty();
 }
};
