Merge Sort
==================
Based on divide conquer  principle.
Disadvantage:- Take O(n) extra space.
Type of merge:- External merge and internal merge.
time complexcity:- nlogn

mid=(start + end)/2 is risked for overflow when the integer value exceed 2^32.

mid= start + (end-start)/2= start + (end-start)>>2^32 [wrong]

lOGIC:-
----------

mergesort(start,end,a):
divide:
mergesort(start,mid,a);
mergesort(mid+1,end,a);
conquer:
merge(start,end,mid,a);

void mergesort(int a[],int start, int end)
{
  if(end > star)
  {
    mid=start + (end - start) >>2^32;
    mergersort(a,start,mid);
    mergesort(a,mid+1,end);
	merge(a,start,end,mid);
	}
}
void merge(int a[], int start, int mid, int end){
 
    int i,j,k;
 
    int temp[end-start+1];
 
    i = start; j = mid+1; k =0;
 
    while(i<= mid && j<= end){
        if(a[i]< a[j]){
            temp[k++]= a[i++];
        }
        else {
            temp[k++]  = a[j++];
        }
    }
    while(i<=mid){
        temp[k++] = a[i++]; 
    }
    while(j<=end){
        temp[k++] = a[j++]; 
    }
    for(i =0; i<k;i++){
        a[i+start] = temp[i];
    }
}

Q1:- Counting Inversion in an array
=========================================
Ex:- A = [2,4,1,3,5]
There are three inversions : (2,1) (4,1) and (4,3)

Below is algorithm to count inversions in an array

MergeAndCount(int A, int B):
1. Let A,B two input sorted arrays
2. Output list
3. i,j current pointers to A and B array, start at 0
4. Count number of inversion, initially 0
5. While i < length(A) and j < length(b)
   5.a if b[j] < a[i] : count += number of element remaining in A
   5.b Increment j; j++
   5.c else increment i; i++
6. Return count
Above method is replaced as last merge part of merge.

SplitAndCount(L):
1. if L has one element return 0
2. else
   2.a divide L into A, B 
   2.b inversionLeft  = MergeSortAndCount(A)
   2.c inversionRight = MergeSortAndCount(B)
   3.d inversionMerge = MergeAndCount(A,B)
  return inversionLeft + inversionRight + inversionMerge

#include <stdio.h>
 
int mergeAndCount(int a[], int low, int mid, int high){
	int i = low;
	int j = mid+1;
	int k = 0;
	int inversionCount = 0;
	int c[high-low+1];
 
	while(i <= mid && j <= high){
		if(a[i] < a[j]){
			c[k++] = a[i++];
		}

Problem-1
=============
Merge two sorted list in one list.

solution:-
Node * merge_sort(Node *a, Node *b){
    Node *result = NULL;
    if(a ==  NULL)
        return b;
    else if(b == NULL)
        return a;
 
    /* For the first node, we would set the result to either a or b */
      if(a->data <= b->data){
         result = a;
        /* Result's next will point to smaller one in lists 
           starting at a->next  and b */
         result->next = merge_sort(a->next,b);
      }
      else {
        result = b;
       /*Result's next will point to smaller one in lists 
         starting at a and b->next */
        result->next = merge_sort(a,b->next);
      }
      return result;
}